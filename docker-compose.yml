services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: etoh-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: etoh_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Remove external port mapping for security - only internal access
    expose:
      - "5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d etoh_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Express API Backend
  api:
    build: ./backend
    container_name: etoh-api
    restart: unless-stopped
    user: "1001:1001"  # Run as nodejs user for security
    # Remove external port mapping - only internal access
    expose:
      - "3001"
    environment:
      - NODE_ENV=production  # Changed to production
      - PORT=3001
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=etoh_tracker
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - UPLOAD_DIR=/app/uploads
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # Expo React Native App
  app:
    build:
      context: .
      args:
        API_URL: ${API_URL:-https://etoh.doctorfranz.com}
    container_name: etoh-app
    restart: unless-stopped
    # Remove external port mapping - only internal access
    expose:
      - "80"
    depends_on:
      - api
    networks:
      - app-network

networks:
  app-network:
    external: true
    name: secure-app-network

volumes:
  postgres_data:
  uploads_data:
